<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>loovien&amp;weiwei-(luowen ❤️ wwei)</title>
  
  <subtitle>life is beautiful.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://loovien.github.io/"/>
  <updated>2020-08-23T07:02:23.378Z</updated>
  <id>https://loovien.github.io/</id>
  
  <author>
    <name>luowen&lt;bigpao.luo@gmail.com&gt;</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用seleium+chrome实现自动学习</title>
    <link href="https://loovien.github.io/2020/08/21/%E4%BD%BF%E7%94%A8selenium+chrome%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD/"/>
    <id>https://loovien.github.io/2020/08/21/使用selenium+chrome实现自动学习强国/</id>
    <published>2020-08-21T06:17:59.000Z</published>
    <updated>2020-08-23T07:02:23.378Z</updated>
    
    <content type="html"><![CDATA[<p>老婆的学习强国账号，每日要学满30分。 每天也是一个任务，作为一个开发者，本着学习的态度， 实现它(包含学习文章， 学习视频， 每日答题)。</p><a id="more"></a><p>大致的实现逻辑也很简单，就是使用selenium+chromedriver 自动化测试工具，完整的代替手工的点来点去。</p><p>为了防检测， 也把对应人chromedriver的标示， window navigator 的标示清除了。</p><p>具体的效果如下：</p><p>例子中学习文章1篇， 文章学习时长3秒， 视频学习1个 视频学习时间3秒。</p><p><img src="/images/videos/xuexi1.gif" alt="案例"></p><p>PS: 学习官方说会有检测机制，虽然把driver的标示去掉了，浏览器的标示也去掉了， 具体也不知道是怎么检测的，所以谨慎使用。</p><p>需要学习源码可以加微信，获取。</p><p><img src="/images/weixin1.png" alt="超级罗大文"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;老婆的学习强国账号，每日要学满30分。 每天也是一个任务，作为一个开发者，本着学习的态度， 实现它(包含学习文章， 学习视频， 每日答题)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="selenium chromedriver" scheme="https://loovien.github.io/tags/selenium-chromedriver/"/>
    
  </entry>
  
  <entry>
    <title>how-to-use-opentracing</title>
    <link href="https://loovien.github.io/2020/05/05/how-to-use-opentracing/"/>
    <id>https://loovien.github.io/2020/05/05/how-to-use-opentracing/</id>
    <published>2020-05-05T01:24:37.000Z</published>
    <updated>2020-05-05T02:29:37.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="golang中使用jaeger实现链路追踪。"><a href="#golang中使用jaeger实现链路追踪。" class="headerlink" title="golang中使用jaeger实现链路追踪。"></a>golang中使用jaeger实现链路追踪。</h2><p>在分布式系统中，问题的定位非常困难，有了jaeger, 一切变的简单了。 举个简单好理解的例子，追踪就像孙悟空(rootSpan)进了盘丝洞,  发现有很多的洞，每个洞都让他的小猴子(childSpan)进入探路，最终所有的猴子探好了路把信息发给一个收集(jaeger-collector), 最后通过jeagerUI查询(jaeger-query)展示</p><a id="more"></a><ol><li>安装jaegertracing/all-in-one</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  --rm   -p 6831:6831/udp   -p 6832:6832/udp   -p 5778:5778   -p 16686:16686   -p 14268:14268   -p 14250:14250   -p 9411:9411   jaegertracing/all-in-one:latest</span><br></pre></td></tr></table></figure><ol start="2"><li>创建opentracing对象</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Tracing <span class="keyword">struct</span> &#123;</span><br><span class="line">opentracing.Tracer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTracing</span><span class="params">()</span> <span class="params">(*Tracing, <span class="keyword">func</span>()</span>, <span class="title">error</span>)</span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">err    error</span><br><span class="line">closer io.Closer</span><br><span class="line">cfg    *config.Configuration</span><br><span class="line">tracer opentracing.Tracer</span><br><span class="line">)</span><br><span class="line">cfg = &amp;config.Configuration&#123;</span><br><span class="line">Sampler: &amp;config.SamplerConfig&#123;</span><br><span class="line">Type:  <span class="string">"const"</span>, <span class="comment">// 全量</span></span><br><span class="line">Param: <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line">Reporter: &amp;config.ReporterConfig&#123;</span><br><span class="line">LogSpans:           <span class="literal">true</span>,</span><br><span class="line">LocalAgentHostPort: <span class="string">"192.168.165.21:6831"</span>, <span class="comment">// 运行 all-in-one 的服务IP, </span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">tracer, closer, err = cfg.New(</span><br><span class="line">        <span class="string">"test-tracing"</span>, <span class="comment">// 你的服务名</span></span><br><span class="line">config.Logger(jaeger.StdLogger), <span class="comment">// 日志, 可以使用自己的logger</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"ERROR: cannot init Jaeger: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">closeFunc := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">_ = closer.Close()</span><br><span class="line">&#125;</span><br><span class="line">opentracing.SetGlobalTracer(tracer) <span class="comment">// 设置全局</span></span><br><span class="line">tracing := &amp;Tracing&#123;</span><br><span class="line">Tracer:  tracer,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tracing, closeFunc, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用, 一般的 gateway/webhttp 做为追踪的起点， 跟据客户端请求traceid, 服务端接收设置tag标记, 使用gin测试</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</span><br><span class="line">g := gin.New()</span><br><span class="line">g.GET(<span class="string">"/login"</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">option := opentracing.Tag&#123;Key: <span class="string">"traceId"</span>, Value: ctx.GetHeader(<span class="string">"traceId"</span>)&#125;</span><br><span class="line">span, childctx := opentracing.StartSpanFromContext(ctx, <span class="string">"login"</span>, option) <span class="comment">// 设置tag</span></span><br><span class="line"><span class="keyword">defer</span> span.Finish()</span><br><span class="line">span.LogKV(<span class="string">"loginRequest"</span>, ctx.Request.UserAgent())</span><br><span class="line">selectdb := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">dbspan, _ := opentracing.StartSpanFromContext(childctx, <span class="string">"selectFromDb"</span>) <span class="comment">// 从父span派生child span</span></span><br><span class="line"><span class="keyword">defer</span> dbspan.Finish()</span><br><span class="line">dbspan.LogKV(<span class="string">"selectFromDb"</span>, <span class="string">"id:100"</span>)</span><br><span class="line">&#125;</span><br><span class="line">selectdb()</span><br><span class="line">        c.JSON(<span class="number">200</span>, gin.H(&#123;<span class="string">"message"</span>: <span class="string">"ok"</span>&#125;))</span><br><span class="line">&#125;)</span><br><span class="line">g.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>访问<a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a> 后再去jaegerUI查看 <a href="http://192.168.165.21:16686/" target="_blank" rel="noopener">http://192.168.165.21:16686/</a>, 能看到记录的span。</li></ol><p>PS: 这个tracing个入感觉对代码的侵入很大。可以针对有必要的进行追踪.</p><p><a href="https://github.com/yurishkuro/opentracing-tutorial" target="_blank" rel="noopener">更好的学习资料</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;golang中使用jaeger实现链路追踪。&quot;&gt;&lt;a href=&quot;#golang中使用jaeger实现链路追踪。&quot; class=&quot;headerlink&quot; title=&quot;golang中使用jaeger实现链路追踪。&quot;&gt;&lt;/a&gt;golang中使用jaeger实现链路追踪。&lt;/h2&gt;&lt;p&gt;在分布式系统中，问题的定位非常困难，有了jaeger, 一切变的简单了。 举个简单好理解的例子，追踪就像孙悟空(rootSpan)进了盘丝洞,  发现有很多的洞，每个洞都让他的小猴子(childSpan)进入探路，最终所有的猴子探好了路把信息发给一个收集(jaeger-collector), 最后通过jeagerUI查询(jaeger-query)展示&lt;/p&gt;
    
    </summary>
    
    
      <category term="tracing-go" scheme="https://loovien.github.io/tags/tracing-go/"/>
    
  </entry>
  
  <entry>
    <title>记INodeClient VPN 安装出现的问题</title>
    <link href="https://loovien.github.io/2020/02/10/iNodevpn/"/>
    <id>https://loovien.github.io/2020/02/10/iNodevpn/</id>
    <published>2020-02-10T15:13:20.000Z</published>
    <updated>2020-02-10T16:27:53.646Z</updated>
    
    <content type="html"><![CDATA[<p>今天在家办公， 需要vpn连接到办公室网络， 的用VPN， 找的运维哥哥要了安装包， 安装好了， 发现用不了。 一直出现 </p><p><strong>failed to get scenario and connection information, please restart the client to try</strong>.</p><p>作为一个开发，这个问题必须解决它。</p><a id="more"></a><p>出现问题，本能的去查看安装，运行日志。能力不够， 看不懂。 于是又去查了下错误信息。搜索到了一篇文章</p><p><a href="https://zhiliao.h3c.com/Theme/details/40161" target="_blank" rel="noopener">解决方案</a>, 和我的情况一模一样。 </p><p><strong>经确定发现现场安装inode管理中心的操作系统是中文版，但是安装客户端的环境是英文版导致。 在英文版上安装iNode管理中心进行定制，定制出来客户端在英文版系统上安装，问题解决。</strong></p><p>上面说的很清楚了， 下载一个管理中心， 再定制一下就可以了。</p><p><a href="http://www.h3c.com/cn/Service/Document_Software/Software_Download/IP_Management/iNode/iNode_PC/" target="_blank" rel="noopener">管理中心下载地址</a></p><p>临时下载账号：yx800/01230123</p><p>打开inode管理中心， 点击 <code>client customization</code>, 选着一个场景， 默认不知道全部选择好了， </p><p>注意： 选择了 <code>wireless access</code> 这个打包出来的客户端，安装后 windows 自带的WI-FI会被这个玩意控制， 需要先用</p><p>这个客户端连接WI-FI, 然后再释放控制权。我公司使用的是<code>SSL VPN</code>, 我就只勾选了这个场景了。 到目前为止， 搞好了。</p><p>管理中心(H3C-iNode-PC-7.3-E0548.zip)百度网盘提供下载： 链接: <a href="https://pan.baidu.com/s/1tv7UoEL7L1iAkt1GS2aKcw" target="_blank" rel="noopener">https://pan.baidu.com/s/1tv7UoEL7L1iAkt1GS2aKcw</a> 提取码: nms2</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在家办公， 需要vpn连接到办公室网络， 的用VPN， 找的运维哥哥要了安装包， 安装好了， 发现用不了。 一直出现 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;failed to get scenario and connection information, please restart the client to try&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;作为一个开发，这个问题必须解决它。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vpn" scheme="https://loovien.github.io/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>同步hexo博客内容到公众号</title>
    <link href="https://loovien.github.io/2020/01/09/hexo%E5%90%8C%E6%AD%A5%E5%85%AC%E4%BC%97%E5%8F%B7%E6%93%8D%E4%BD%9C/"/>
    <id>https://loovien.github.io/2020/01/09/hexo同步公众号操作/</id>
    <published>2020-01-09T13:49:56.000Z</published>
    <updated>2020-02-10T15:39:03.342Z</updated>
    
    <content type="html"><![CDATA[<p>最近想把hexo写的博客内容也同步到微信公众号中， 萌生了一个简单的项目，那就来搞它吧。</p><a id="more"></a><h2 id="大致的思路"><a href="#大致的思路" class="headerlink" title="大致的思路"></a>大致的思路</h2><p>hexo 编写好的文档后， 推送到远程仓库， 仓库使用webhook通知服务器， 服务器脚本拉取最新代码后，</p><p>判断有没有新写的博客(难点， 怎么获取最近编辑的博客文件的markdown文件呢)， 有的话， 使用 <code>hexo deploy</code> </p><p>发布部署后，再读取博客的标题，详情摘要, 有图片的话，再把图片对应生成微信的图文素材，调用微信开放接口,</p><p>同步到微信中。再调用群发接口，通知关注的用户(哈哈，好像很完美)</p><h4 id="解析md文件"><a href="#解析md文件" class="headerlink" title="解析md文件"></a>解析md文件</h4><p>hexo 博客markdown文件格式大致: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 同步hexo博客内容到公众号</span><br><span class="line">date: 2020-01-09 21:49:56</span><br><span class="line">desc: 再hexo中编写好的博客文件，实现自动同步到公众号中。</span><br><span class="line">tags: blog, WeChat</span><br><span class="line">image: <span class="built_in">source</span>/imgs/hexo.jpg</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>读取开头中的 title/公众号标题, date/原文http路径 , image/公众号的图片, 有的话。</p><h3 id="推送微信"><a href="#推送微信" class="headerlink" title="推送微信"></a>推送微信</h3><p>对应项目中的<code>net.go</code></p><h3 id="hexo-发布"><a href="#hexo-发布" class="headerlink" title="hexo 发布"></a>hexo 发布</h3><p>对应项目中的<code>hexo.go</code></p><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p>包含了所有信息, 想想无所谓了,公众号有白名单。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/loovien/vxgo.git</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想把hexo写的博客内容也同步到微信公众号中， 萌生了一个简单的项目，那就来搞它吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog, WeChat" scheme="https://loovien.github.io/tags/blog-WeChat/"/>
    
  </entry>
  
  <entry>
    <title>2020</title>
    <link href="https://loovien.github.io/2020/01/01/2020/"/>
    <id>https://loovien.github.io/2020/01/01/2020/</id>
    <published>2020-01-01T13:11:07.000Z</published>
    <updated>2020-01-01T13:31:18.422Z</updated>
    
    <content type="html"><![CDATA[<p>2020年了，2019年整年就像一条咸鱼。2020年，新的开始， 新的希望， 要改变，要加油！</p><a id="more"></a><p>2019年过了，这一年失去了生活的乐趣， 失去了生活的动力，活成了咸鱼了。2020年， 新的开始，新的希望。 要改变， 要突破， 加油！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2020年了，2019年整年就像一条咸鱼。2020年，新的开始， 新的希望， 要改变，要加油！&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://loovien.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>goproxy.io的使用</title>
    <link href="https://loovien.github.io/2019/10/09/goproxy%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://loovien.github.io/2019/10/09/goproxy的使用/</id>
    <published>2019-10-09T13:40:16.000Z</published>
    <updated>2019-10-09T13:49:47.785Z</updated>
    
    <content type="html"><![CDATA[<p>go1.11后支持的module再天朝使用起来，并不是那么爽，各种限制.因此<a href="https://goproxy.io/" target="_blank" rel="noopener">goproxy</a>就出来了.</p><a id="more"></a><ol><li>linux or MacOS 使用</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enable the go modules feature</span></span><br><span class="line"><span class="built_in">export</span> GO111MODULE=on</span><br><span class="line"><span class="comment"># Set the GOPROXY environment variable</span></span><br><span class="line"><span class="built_in">export</span> GOPROXY=https://goproxy.io</span><br></pre></td></tr></table></figure><ol start="2"><li>windows PowerShell 使用</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enable the go modules feature</span></span><br><span class="line"><span class="variable">$env</span>:GO111MODULE=<span class="string">"on"</span></span><br><span class="line"><span class="comment"># Set the GOPROXY environment variable</span></span><br><span class="line"><span class="variable">$env</span>:GOPROXY=<span class="string">"https://goproxy.io"</span></span><br></pre></td></tr></table></figure><ol start="3"><li>golang的版本再&gt;=1.13的时候, 可以直接使用命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.io,direct</span><br></pre></td></tr></table></figure><ol start="4"><li>再公司内部搭建的仓库, 不经过代理, 可以使用.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set environment variable allow bypassing the proxy for selected modules</span></span><br><span class="line">go env -w GOPRIVATE=*.corp.example.com</span><br></pre></td></tr></table></figure><p>PS: 权威参考<a href="https://goproxy.io" target="_blank" rel="noopener">goproxy.io</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;go1.11后支持的module再天朝使用起来，并不是那么爽，各种限制.因此&lt;a href=&quot;https://goproxy.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;goproxy&lt;/a&gt;就出来了.&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang, goproxy" scheme="https://loovien.github.io/tags/golang-goproxy/"/>
    
  </entry>
  
  <entry>
    <title>golang反射调用</title>
    <link href="https://loovien.github.io/2019/08/30/golang%E7%9A%84%E5%8F%8D%E5%B0%84%E8%B0%83%E7%94%A8/"/>
    <id>https://loovien.github.io/2019/08/30/golang的反射调用/</id>
    <published>2019-08-30T02:18:54.000Z</published>
    <updated>2019-08-30T14:40:51.083Z</updated>
    
    <content type="html"><![CDATA[<p>通过反射， 简单的调用实例的方法。虽然这个反射性能不是很好， 但有时候用起来往往还挺爽的。</p><a id="more"></a><p>暴力直接上代码</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Logic <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> Query <span class="keyword">struct</span> &#123;</span><br><span class="line">Id <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="keyword">int</span></span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Logic)</span> <span class="title">Echo</span><span class="params">(q *Query)</span> <span class="params">(*Person, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Person&#123;</span><br><span class="line">Id:   <span class="number">1</span>,</span><br><span class="line">Name: <span class="string">"luowen"</span>,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">l := &amp;Logic&#123;&#125;</span><br><span class="line">_, ok := reflect.TypeOf(l).MethodByName(<span class="string">"Echo"</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123; <span class="comment">// check method 'Echo' exists</span></span><br><span class="line">log.Fatalf(<span class="string">"instance method %s not exists!"</span>, <span class="string">"Echo"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// sm.Type.NumOut() // number of method return.</span></span><br><span class="line">    <span class="comment">// sm.Type.NumIn() // number of method arguments need.</span></span><br><span class="line">resp := reflect.ValueOf(l).MethodByName(<span class="string">"Echo"</span>).Call([]reflect.Value&#123; <span class="comment">// reflect invoke it</span></span><br><span class="line">reflect.ValueOf(&amp;Query&#123;</span><br><span class="line">Id: <span class="number">10</span>,</span><br><span class="line">&#125;),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> !resp[<span class="number">0</span>].IsNil() &#123; <span class="comment">// get result</span></span><br><span class="line">p := resp[<span class="number">0</span>].Interface().(*Person)</span><br><span class="line">log.Printf(<span class="string">"result[0]: %d, %s\n"</span>, p.Id, p.Name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !resp[<span class="number">1</span>].IsNil() &#123; <span class="comment">// get result</span></span><br><span class="line">e := resp[<span class="number">1</span>].Interface().(error)</span><br><span class="line">log.Printf(<span class="string">"result[1]: %v\n"</span>, e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过反射， 简单的调用实例的方法。虽然这个反射性能不是很好， 但有时候用起来往往还挺爽的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang, reflect" scheme="https://loovien.github.io/tags/golang-reflect/"/>
    
  </entry>
  
  <entry>
    <title>php-fpm 调试</title>
    <link href="https://loovien.github.io/2019/07/11/%E8%B0%83%E8%AF%95php-fpm/"/>
    <id>https://loovien.github.io/2019/07/11/调试php-fpm/</id>
    <published>2019-07-11T05:57:27.000Z</published>
    <updated>2019-08-30T14:46:29.338Z</updated>
    
    <content type="html"><![CDATA[<p>遇到一个问题， nginx代理php请求到php-fpm, 发现不知道是nginx的问题， 还是php-fpm的问题. 想通过bash直接调试php-fpm.</p><a id="more"></a><p>查了下, 发现是可以。记录下。</p><p>debian/ubuntu 下安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt-get install libfcgi0ldbl</span></span><br></pre></td></tr></table></figure><p>centos/redhat 下安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  yum --enablerepo=epel install fcgi</span></span><br></pre></td></tr></table></figure><p>编写脚本测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat &gt; php-fpm.sh &lt;&lt;EOF</span></span><br><span class="line">    <span class="comment">#!/bin/bash</span></span><br><span class="line">    SCRIPT_FILENAME=/var/www/html/site/index.php \</span><br><span class="line">    REQUEST_URI=/api/user/wealth.json \</span><br><span class="line">    QUERY_STRING=uid=121923823&amp;_=1828188212 \</span><br><span class="line">    REQUEST_METHOD=GET \</span><br><span class="line">    cgi-fcgi -<span class="built_in">bind</span> -connect php-fpm-host:9000</span><br><span class="line">  EOF</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bash -x php-fpm.sh</span></span><br></pre></td></tr></table></figure><p>这个就是nginx代理过去的请求是原理是一样的, nginx传的变量会更多点。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fastcgi_param</span>QUERY_STRING<span class="variable">$query_string</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>REQUEST_METHOD<span class="variable">$request_method</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>CONTENT_TYPE<span class="variable">$content_type</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>CONTENT_LENGTH<span class="variable">$content_length</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">fastcgi_param</span>SCRIPT_FILENAME<span class="variable">$request_filename</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>SCRIPT_NAME<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>REQUEST_URI<span class="variable">$request_uri</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>DOCUMENT_URI<span class="variable">$document_uri</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>DOCUMENT_ROOT<span class="variable">$document_root</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>SERVER_PROTOCOL<span class="variable">$server_protocol</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">fastcgi_param</span>GATEWAY_INTERFACECGI/<span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>SERVER_SOFTWAREnginx/<span class="variable">$nginx_version</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">fastcgi_param</span>REMOTE_ADDR<span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>REMOTE_PORT<span class="variable">$remote_port</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>SERVER_ADDR<span class="variable">$server_addr</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>SERVER_PORT<span class="variable">$server_port</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>SERVER_NAME<span class="variable">$server_name</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">fastcgi_param</span>HTTPS<span class="variable">$https</span> if_not_empty;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遇到一个问题， nginx代理php请求到php-fpm, 发现不知道是nginx的问题， 还是php-fpm的问题. 想通过bash直接调试php-fpm.&lt;/p&gt;
    
    </summary>
    
    
      <category term="php-fpm" scheme="https://loovien.github.io/tags/php-fpm/"/>
    
  </entry>
  
  <entry>
    <title>搭建 microk8s</title>
    <link href="https://loovien.github.io/2019/07/03/microk8s/"/>
    <id>https://loovien.github.io/2019/07/03/microk8s/</id>
    <published>2019-07-03T01:40:16.000Z</published>
    <updated>2019-08-30T14:46:29.336Z</updated>
    
    <content type="html"><![CDATA[<p>安装一个kubernetes集群学习， 还是又点门槛的， 试过各种方案， 今天搞个microk8s来玩玩。也许是最简单的一中.</p><a id="more"></a><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ol><li>Ubuntu Server 18.04.1 LTS 64位 (腾讯云: 1vCPU/1Gb/50G)</li></ol><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="https://microk8s.io/" target="_blank" rel="noopener">安装</a></h3><ol><li>安装 microk8s</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install microk8s --classic</span><br></pre></td></tr></table></figure><ol start="2"><li>查看 microk8s 信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap info microk8s</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装一个kubernetes集群学习， 还是又点门槛的， 试过各种方案， 今天搞个microk8s来玩玩。也许是最简单的一中.&lt;/p&gt;
    
    </summary>
    
    
      <category term="k8s, kubernetes" scheme="https://loovien.github.io/tags/k8s-kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>清除 redis 无用数据</title>
    <link href="https://loovien.github.io/2019/05/07/%E6%B8%85%E9%99%A4redis%E6%97%A0%E7%94%A8%E6%95%B0%E6%8D%AE/"/>
    <id>https://loovien.github.io/2019/05/07/清除redis无用数据/</id>
    <published>2019-05-07T14:06:58.000Z</published>
    <updated>2019-05-08T02:48:40.151Z</updated>
    
    <content type="html"><![CDATA[<p>近期发现redis数据暴增， 检查发现有很多key下入的时候，没有设置过期时间， 而且key的名称是拼接上了时间， 和随机数。这个清理这些key带来了一点麻烦。</p><a id="more"></a><p>最基本的原理就是， 把key找出来， 然后再删除。</p><blockquote><p>之前有写一片文章说明 直接使用 redis-cli -n {数据库} keys ‘{glob 匹配, 参考官方文档有惊喜}’ | xargs -n 1 redis-cli del 但是， 这个方案再数据量大的时候， 会阻塞线上业务.</p></blockquote><h3 id="找出-key-的名称"><a href="#找出-key-的名称" class="headerlink" title="找出 key 的名称"></a>找出 key 的名称</h3><ol start="0"><li>redis-server 执行 bgsave, 把redis数据持久化到硬盘上。</li><li>找一个好用的工具<strong>rdb</strong> 一个python写的 dump.rdb 分析工具.</li><li>执行 <code>rdb --command justkeys --key &quot;.*&quot;  dump.rdb</code></li><li>找出的key需要去重下, rdb这个工具解析出来的key会有重复的</li></ol><h3 id="构造redis通用数据"><a href="#构造redis通用数据" class="headerlink" title="构造redis通用数据"></a>构造redis通用数据</h3><ol start="0"><li><p>发现到处来的keys文件贼大, 需要切割它 <code>split -a 6 -l 10000 dump.keys</code></p></li><li><p>使用redis的pipleline 来批量处理它, bash 开启多个进程来处理它。也不能开太多。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">dirpath=/path/to/split/dir</span><br><span class="line">num=0</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(ls <span class="variable">$dirpath</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="comment">#str=$(cat $dirpath$file | sed "s/^/DEL /")</span></span><br><span class="line">  absfile=<span class="variable">$dirpath</span><span class="variable">$file</span></span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">"del file <span class="variable">$&#123;absfile&#125;</span>"</span></span><br><span class="line">  (<span class="built_in">echo</span> -e $(cat <span class="variable">$absfile</span> | xargs -n 1 -I &#123;&#125; <span class="built_in">echo</span> <span class="string">"DEL &#123;&#125;\r\n"</span> | tr -d <span class="string">"\n"</span>) | nc redis_host redis_port &amp;)</span><br><span class="line">  num=<span class="variable">$num</span>+1</span><br><span class="line">  <span class="keyword">if</span> [[ <span class="variable">$num</span> -eq 100 ]];<span class="keyword">then</span></span><br><span class="line">    sleep 100</span><br><span class="line">    num=0</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ol start="2"><li>发现redis的内存释放飞流直下三千尺。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期发现redis数据暴增， 检查发现有很多key下入的时候，没有设置过期时间， 而且key的名称是拼接上了时间， 和随机数。这个清理这些key带来了一点麻烦。&lt;/p&gt;
    
    </summary>
    
    
      <category term="bash, redis" scheme="https://loovien.github.io/tags/bash-redis/"/>
    
  </entry>
  
  <entry>
    <title>清除win10流氓</title>
    <link href="https://loovien.github.io/2019/04/12/%E8%AE%B0%E6%B8%85%E9%99%A4win10%E4%B8%8A%E6%B5%81%E6%B0%93/"/>
    <id>https://loovien.github.io/2019/04/12/记清除win10上流氓/</id>
    <published>2019-04-12T01:57:27.000Z</published>
    <updated>2019-04-12T14:44:23.347Z</updated>
    
    <content type="html"><![CDATA[<p>最近电脑打开chrome浏览器， 莫名其妙的自动打开hao123网站, 有点被强奸了感觉, 网上搜索一大推解决方案， 发现都不是很好用，折腾了很久， 今天终于解决了。</p><a id="more"></a><h2 id="场景还原"><a href="#场景还原" class="headerlink" title="场景还原"></a>场景还原</h2><ol><li>在官网上下载<code>https://www.google.cn/chrome/</code> 下载后, 第一次打开是好的, 第二次打开就莫名的打开了hao123。</li><li>网上说找到安装目录(<code>&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot;</code>)后， 把chrome.exe 换个名字， 在创建一个快捷方式， 再使用, 这个方案的确可以， 但是木马还在， 不能忍受。</li><li>网上有很多帖子说改注册表, 是过了, 没软用。</li><li>下载360急救箱, 全盘扫描, 的确扫描出来了几个木马(360牛逼)， 顺利清除。</li><li>重启电脑， 妈的， 电脑多了一个360急救箱的选项, 这我不能忍受了。</li><li><code>win + r</code> 组合键， 输入 <strong>msconfig</strong> 找到引导选项卡， 把360急救箱的那列删除, 然而, 妈的, 这玩意删除按钮是灰色的, 又被强奸了…..</li><li>查找了一番, 找到了个 easyBCD 软件, 安装后, 找到对应的引导选项删除。 欸， 这次终于搞定了, 感概一下, 想我祖国大地上有多少个电脑, 被这些玩意给强奸这。</li></ol><p>结尾最后， 分享一个网站： ·<code>http://poro.fun/</code>， 用了一段时间了， 还算稳定， 流量每天签到获取(没有验证码,可以写个脚本定时签到), 流量仅供查点资料。当让， 钱是好东西。</p><!-- 得安装一个好看的中文字体 -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近电脑打开chrome浏览器， 莫名其妙的自动打开hao123网站, 有点被强奸了感觉, 网上搜索一大推解决方案， 发现都不是很好用，折腾了很久， 今天终于解决了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="win10" scheme="https://loovien.github.io/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>使用github webhook 自动发布博客</title>
    <link href="https://loovien.github.io/2019/04/07/auto-deploy-blog/"/>
    <id>https://loovien.github.io/2019/04/07/auto-deploy-blog/</id>
    <published>2019-04-07T01:57:27.000Z</published>
    <updated>2019-04-06T18:14:36.590Z</updated>
    
    <content type="html"><![CDATA[<p>最近电脑重穿了系统, 发现自己的博客环境缺失了， 索性本地就不要这个node环境了， 放到服务器上搞吧。原理很简单， 每次我的blog-code有代码提交, github的webhook自动回调我的服务器上一个接口， 那个接口处理把代码拉去下来， 更新， 并且生成静态文件， 发布。</p><a id="more"></a><blockquote><p>本着怎么简单怎么来的原则， 更新代码使用一个bash脚本实现。</p></blockquote><h3 id="代码更新发布"><a href="#代码更新发布" class="headerlink" title="代码更新发布"></a>代码更新发布</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># @title: update blog-code</span></span><br><span class="line"><span class="comment"># @desc: use go exec.Command don't working, use bash script do it</span></span><br><span class="line"><span class="comment"># @author: luowen&lt;loovien@163.com&gt;</span></span><br><span class="line"></span><br><span class="line">repoName=blog-code</span><br><span class="line">git=/usr/bin/git</span><br><span class="line">repoURL=https://github.com/loovien/blog-code.git</span><br><span class="line">hexo=/opt/nodejs/bin/hexo</span><br><span class="line">npm=/opt/nodejs/bin/npm</span><br><span class="line">workDir=/root/luowen</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$workDir</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$&#123;workDir&#125;</span>/<span class="variable">$&#123;repoName&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    cmd=<span class="string">"<span class="variable">$&#123;git&#125;</span> clone <span class="variable">$&#123;repoURL&#125;</span>"</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="variable">$cmd</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"git clone <span class="variable">$&#123;repoURL&#125;</span> status: $?"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;repoName&#125;</span></span><br><span class="line"></span><br><span class="line">cmd=<span class="string">"<span class="variable">$&#123;git&#125;</span> pull"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="variable">$cmd</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"git pull staus: $?"</span></span><br><span class="line"></span><br><span class="line">cmd=<span class="string">"<span class="variable">$&#123;hexo&#125;</span> generate -d"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="variable">$cmd</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hexo generate -d status: $?"</span></span><br></pre></td></tr></table></figure><h2 id="服务端使用go来实现一个服务接口"><a href="#服务端使用go来实现一个服务接口" class="headerlink" title="服务端使用go来实现一个服务接口"></a>服务端使用go来实现一个服务接口</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"os/exec"</span></span><br><span class="line"><span class="string">"os/signal"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"syscall"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">bash        = <span class="string">"/bin/bash"</span></span><br><span class="line">script      = <span class="string">"/root/luowen/bloggem/bloggem.sh"</span></span><br><span class="line">logfileName = <span class="string">"app.log"</span></span><br><span class="line">httpEntry   = <span class="string">"/path/to/deploy.json"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">logfile *os.File</span><br><span class="line">mode    <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.StringVar(&amp;mode, <span class="string">"mode"</span>, <span class="string">"http"</span>, <span class="string">"run console or http mode."</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> closelogfile()</span><br><span class="line">openlogfile()</span><br><span class="line"><span class="keyword">switch</span> strings.ToLower(mode) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"http"</span>:</span><br><span class="line">runHttpMode()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"console"</span>:</span><br><span class="line">runConsoleMode()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">flag.PrintDefaults()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runConsoleMode</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"></span><br><span class="line">logsave(<span class="string">"info"</span>, <span class="string">"console run start."</span>)</span><br><span class="line"><span class="keyword">var</span> buf = &amp;bytes.Buffer&#123;&#125;</span><br><span class="line">cmd := exec.Cmd&#123;</span><br><span class="line">Path: bash,</span><br><span class="line">Args: []<span class="keyword">string</span>&#123;<span class="string">"-c"</span>, script&#125;,</span><br><span class="line">Stdout: buf,</span><br><span class="line">Stderr: buf,</span><br><span class="line">&#125;</span><br><span class="line">err := cmd.Run()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span> err.Error()</span><br><span class="line">&#125;</span><br><span class="line">result := buf.String()</span><br><span class="line">fmt.Println(result)</span><br><span class="line">logsave(<span class="string">"info"</span>, result)</span><br><span class="line">logsave(<span class="string">"info"</span>, <span class="string">"console run completed."</span>)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runHttpMode</span><span class="params">()</span></span> &#123;</span><br><span class="line">logsave(<span class="string">"info"</span>, <span class="string">"open logfile: app.log success!"</span>)</span><br><span class="line"><span class="keyword">go</span> httpListen()</span><br><span class="line">logsave(<span class="string">"info"</span>, <span class="string">"http server listen: 20000 success!"</span>)</span><br><span class="line">sigChan := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</span><br><span class="line">signal.Notify(sigChan, syscall.SIGINT, syscall.SIGHUP, syscall.SIGKILL)</span><br><span class="line">sig := &lt;-sigChan</span><br><span class="line">logsave(<span class="string">"info"</span>, <span class="string">"receive terminal signal:"</span>, sig)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// httpListen start http server.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpListen</span><span class="params">()</span></span> &#123;</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.HandleFunc(httpEntry, deploy)</span><br><span class="line">_ = http.ListenAndServe(<span class="string">":20000"</span>, mux)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// deploy blog code</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deploy</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">result := runConsoleMode()</span><br><span class="line">_, _ = w.Write([]<span class="keyword">byte</span>(result))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// openlogfile open a file for logging</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">openlogfile</span><span class="params">()</span></span> &#123;</span><br><span class="line">logfile, _ = os.OpenFile(logfileName, os.O_CREATE|os.O_WRONLY|os.O_APPEND, os.ModePerm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// closelogfile close the opening log file</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">closelogfile</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> logfile != <span class="literal">nil</span> &#123;</span><br><span class="line">_ = logfile.Close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loginfo write application log into logfile</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logsave</span><span class="params">(typ <span class="keyword">string</span>, logmesg ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> logfile == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(errors.New(<span class="string">"logfile don't open yet!"</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [info]:2019-04-06 12:00:12: something has wrong!</span></span><br><span class="line">fmtMesg := fmt.Sprintf(<span class="string">"[%s]:%s: %v\n"</span>, typ, time.Now().Format(<span class="string">"2006-01-02 15:04:05"</span>), logmesg)</span><br><span class="line">fmt.Print(fmtMesg)</span><br><span class="line">_, _ = logfile.WriteString(fmtMesg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过nginx的代理【可选】"><a href="#通过nginx的代理【可选】" class="headerlink" title="通过nginx的代理【可选】"></a>通过nginx的代理【可选】</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">charset</span>     utf-<span class="number">8</span>;</span><br><span class="line">    <span class="attribute">access_log</span>  logs/default.log  main;</span><br><span class="line">    <span class="attribute">error_log</span>   logs/default.log;</span><br><span class="line">    <span class="attribute">error_page</span>  <span class="number">404</span>              /<span class="number">404</span>.html;</span><br><span class="line">    <span class="attribute">error_page</span>  <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /\.ht</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span>  all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> = /path/to/deploy.json &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:20000;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forword-Ip <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_timeout</span> <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近电脑重穿了系统, 发现自己的博客环境缺失了， 索性本地就不要这个node环境了， 放到服务器上搞吧。原理很简单， 每次我的blog-code有代码提交, github的webhook自动回调我的服务器上一个接口， 那个接口处理把代码拉去下来， 更新， 并且生成静态文件， 发布。&lt;/p&gt;
    
    </summary>
    
    
      <category term="github,webhook" scheme="https://loovien.github.io/tags/github-webhook/"/>
    
  </entry>
  
  <entry>
    <title>2019</title>
    <link href="https://loovien.github.io/2019/02/05/2019-1/"/>
    <id>https://loovien.github.io/2019/02/05/2019-1/</id>
    <published>2019-02-04T22:59:11.000Z</published>
    <updated>2020-08-22T07:34:17.032Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vim搜索中的正则表达式</title>
    <link href="https://loovien.github.io/2019/01/24/vimregexp/"/>
    <id>https://loovien.github.io/2019/01/24/vimregexp/</id>
    <published>2019-01-24T07:55:45.000Z</published>
    <updated>2019-04-06T18:04:02.656Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用vim的搜索替换， 发现只是不够用，特意学习了下。</p><a id="more"></a><h3 id="vim中有个·magic·的东西"><a href="#vim中有个·magic·的东西" class="headerlink" title="vim中有个·magic·的东西"></a>vim中有个·magic·的东西</h3><p>当然快速查看帮助： <code>help magic</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">magic (\m)：除了$ . * ^ 之外其他元字符都要加反斜杠。</span><br><span class="line">nomagic (\M)：除了 $ ^ 之外其他元字符都要加反斜杠。</span><br><span class="line">very magic (\v)：都必须加上反斜杠</span><br><span class="line">very nomagic (\V)：都不加反斜杠</span><br></pre></td></tr></table></figure><p>help中拿过来的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$       $        $         \$        匹配行尾</span><br><span class="line">.       .        \.         \.        匹配任何字符</span><br><span class="line">*       *        \*         \*        前面匹配原的任意次重复</span><br><span class="line">()       \(\)     \(\)     \(\)    组成为单个匹配原</span><br><span class="line">|       \|        \|         \|        分隔可选分支</span><br><span class="line">\a       \a        \a         \a        字母字符</span><br><span class="line">\\       \\        \\         \\        反斜杠 (按本义)</span><br><span class="line">\.       \.        .         .        英文句号 (按本义)</span><br><span class="line">\&#123;       &#123;        &#123;         &#123;        <span class="string">'&#123;'</span>  (按本义)</span><br><span class="line">a       a        a         a        <span class="string">'a'</span>  (按本义)</span><br></pre></td></tr></table></figure><p>默认设置的 <code>magic</code></p><h3 id="一些常用的量词，-元字符"><a href="#一些常用的量词，-元字符" class="headerlink" title="一些常用的量词， 元字符"></a>一些常用的量词， 元字符</h3><p>这些量词，元字符需要自己记下。没办法，👐</p><p>量词：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*  匹配0个或多个(匹配优先)</span><br><span class="line">\+ 匹配1个或多个(匹配优先)</span><br><span class="line">\?或\= 0个或1个(匹配优先)，\?不能在 ? 命令（逆向查找）中使用</span><br><span class="line">\&#123;n,m&#125; 匹配n个到m个(匹配优先),如\d&#123;1, 3&#125;可以匹配1到3个数字,类似1, 12, 123</span><br><span class="line">\&#123;n,&#125; 最少n个(匹配优先)</span><br><span class="line">\&#123;,m&#125; 最多m个(匹配优先</span><br><span class="line">\&#123;n&#125; 恰好n个</span><br></pre></td></tr></table></figure><p>元字符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">*  匹配任意一个字符</span><br><span class="line">[abc] 匹配方括号中的1个字</span><br><span class="line">[a-zA-Z0-9] 匹配所有大小写字母和数字</span><br><span class="line">[^abc] 不匹配方括号中字符</span><br><span class="line">\d 匹配数字 [0-9] </span><br><span class="line">\D 匹配非数字 [^0-9] </span><br><span class="line">\x 匹配16进制字符[0-9A-Fa<span class="_">-f</span>] </span><br><span class="line">\w 匹配单个字符[a-zA-Z0-9] </span><br><span class="line">\W 匹配非单个字符 [^a-zA-Z0-9] </span><br><span class="line">\t 下写字符 [a-z] </span><br><span class="line">\L 非小写字符[^a-z] </span><br><span class="line">\u 大写字符 [A-Z]</span><br><span class="line">\U 非大写的字符[^A-Z]</span><br></pre></td></tr></table></figure><h3 id="一些实用的例子"><a href="#一些实用的例子" class="headerlink" title="一些实用的例子"></a>一些实用的例子</h3><p>查找替换 <code>:%s/luo/wen/g</code> 全局把luo替换成wen <code>:%s/luo/wen/gc</code> 替换前每次询问</p><p>反向应用demo <code>:%s/\(luo\) or \(wen\)/\2 or \1/</code> 将luo 和wen 相互交换</p><p>贪婪和非贪婪</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">demo: luowenoh</span><br><span class="line"></span><br><span class="line">`:%s/\(l.\&#123;-&#125;o\)/hello(\1)/g` =&gt; hello(luo)wenoh</span><br><span class="line"></span><br><span class="line">`:%s/\(l.*o\)/hello(\1)/g` =&gt; hello(luoweno)h</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近使用vim的搜索替换， 发现只是不够用，特意学习了下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vim, regexp" scheme="https://loovien.github.io/tags/vim-regexp/"/>
    
  </entry>
  
  <entry>
    <title>2019</title>
    <link href="https://loovien.github.io/2019/01/01/2019/"/>
    <id>https://loovien.github.io/2019/01/01/2019/</id>
    <published>2019-01-01T14:14:07.000Z</published>
    <updated>2020-01-01T13:11:35.634Z</updated>
    
    <content type="html"><![CDATA[<p>2018在匆匆忙忙的过了, 2019年开始了!</p><a id="more"></a><p>2019年希望能变的更好！在个个方面。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018在匆匆忙忙的过了, 2019年开始了!&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://loovien.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>git一键发布</title>
    <link href="https://loovien.github.io/2018/12/06/git%E4%B8%80%E9%94%AE%E5%8F%91%E5%B8%83/"/>
    <id>https://loovien.github.io/2018/12/06/git一键发布/</id>
    <published>2018-12-05T16:22:58.000Z</published>
    <updated>2019-04-06T18:04:02.624Z</updated>
    
    <content type="html"><![CDATA[<p>一直使用命令行操作git, 发现处理发布流程还是贼费劲, 今天写个<code>bash</code>版的一键发布, 解放下<code>git checkout/merge/tag</code>。</p><a id="more"></a><p>bash版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># @Author luowen&lt;loovien@163.com&gt;</span></span><br><span class="line"><span class="comment"># @time: 2018-12-05</span></span><br><span class="line"><span class="comment"># @desc: 批处理发布流程</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">help</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"\t Used: gitman branch environment\n"</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"\t branch: feature/xxx"</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"\t environment: [beta/online/gray]"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> [ ! <span class="variable">$#</span> -eq 2 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">help</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">feature_branch=<span class="variable">$1</span></span><br><span class="line">environment=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$&#123;feature_branch##*/*&#125;</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"branch must be feature/xxx format!"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$environment</span> <span class="keyword">in</span></span><br><span class="line">  <span class="string">"beta"</span>)</span><br><span class="line">    <span class="comment"># merge and push to beta</span></span><br><span class="line">    beta=<span class="string">"git fetch &amp;&amp; git checkout <span class="variable">$feature_branch</span> &amp;&amp; git pull &amp;&amp; git checkout beta &amp;&amp; git pull &amp;&amp; git merge <span class="variable">$feature_branch</span> &amp;&amp; git push"</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="variable">$beta</span></span><br><span class="line">    ;;</span><br><span class="line">  <span class="string">"online"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">######################################### create release branch ###################################</span></span><br><span class="line"></span><br><span class="line">    relese_branch=<span class="string">"release/"</span>$(<span class="built_in">echo</span> <span class="variable">$feature_branch</span> | cut -d <span class="string">"/"</span> -f2)</span><br><span class="line">    <span class="keyword">while</span> ((1))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      <span class="built_in">read</span> -r -p <span class="string">"use <span class="variable">$release_branch</span>? [Y/N]"</span> ok</span><br><span class="line">      <span class="keyword">case</span> <span class="variable">$ok</span> <span class="keyword">in</span> </span><br><span class="line">        <span class="string">"N"</span>)</span><br><span class="line">          <span class="built_in">read</span> -r  -p <span class="string">"Please input your release branch name: "</span> release_branch</span><br><span class="line">          ;;</span><br><span class="line">        <span class="string">"Y"</span>)</span><br><span class="line">          <span class="built_in">break</span></span><br><span class="line">          ;;</span><br><span class="line">      <span class="keyword">esac</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">######################################## merge code ################################################</span></span><br><span class="line"></span><br><span class="line">    merge_cmd=<span class="string">"git fetch &amp;&amp; git checkout <span class="variable">$feature_branch</span> &amp;&amp; git pull &amp;&amp; git checkout develop &amp;&amp; git pull &amp;&amp; git merge <span class="variable">$feature_branch</span> &amp;&amp; git checkout -b <span class="variable">$release_branch</span> &amp;&amp; git checkout master &amp;&amp; git pull &amp;&amp; git merge <span class="variable">$release_branch</span> &amp;&amp; git push"</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="variable">$merge_cmd</span></span><br><span class="line">    <span class="keyword">if</span> [ ! $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"merge code failture."</span></span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#################################### read tag ######################################################</span></span><br><span class="line">    <span class="built_in">declare</span> deploy_tag</span><br><span class="line">    last_tag=$(<span class="string">"git tag | grep v | sort -r | sed -n '1p'"</span>)</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"current tag: <span class="variable">$last_tag</span>"</span></span><br><span class="line">    <span class="keyword">while</span> ((1))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      <span class="built_in">read</span> -r -p <span class="string">"Please input your tag:"</span> deploy_tag</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"confirm <span class="variable">$deploy_tag</span>"</span></span><br><span class="line">      <span class="built_in">read</span> -r -p <span class="string">"use this tag? [Y/N]"</span> confirm</span><br><span class="line">      <span class="keyword">case</span> <span class="variable">$confirm</span> <span class="keyword">in</span> </span><br><span class="line">        Y)</span><br><span class="line">          <span class="built_in">break</span></span><br><span class="line">      <span class="keyword">esac</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"this deploy use <span class="variable">$deploy_tag</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> </span><br><span class="line">    tag_cmd=<span class="string">"git tag <span class="variable">$deploy_tag</span> -am `date '+%F:%T'` &amp;&amp; git push origin <span class="variable">$deploy_tag</span>"</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="variable">$tag_cmd</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ ! $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"build tag failture."</span></span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">################################# delete branch ###################################################</span></span><br><span class="line">    <span class="built_in">read</span> -r -p <span class="string">"delete local and remote branch"</span> ok</span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$ok</span> <span class="keyword">in</span> </span><br><span class="line">      Y)</span><br><span class="line">        delete_cmd=<span class="string">"git branch -d <span class="variable">$release_branch</span> &amp;&amp; git branch -d <span class="variable">$feature_branch</span> &amp;&amp; git push origin <span class="variable">$feature_branch</span> --delete"</span></span><br><span class="line">        <span class="built_in">eval</span> <span class="variable">$delete_cmd</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    ;;</span><br><span class="line">  <span class="string">"gray"</span>)</span><br><span class="line">    <span class="comment">######################################### create release branch ###################################</span></span><br><span class="line"></span><br><span class="line">    relese_branch=<span class="string">"release/"</span>$(<span class="built_in">echo</span> <span class="variable">$feature_branch</span> | cut -d <span class="string">"/"</span> -f2)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"release branch: <span class="variable">$release_branch</span>"</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="keyword">while</span> ((1))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      <span class="built_in">read</span> -r -p <span class="string">"use <span class="variable">$release_branch</span>? [Y/N]"</span> ok</span><br><span class="line">      <span class="keyword">case</span> <span class="variable">$ok</span> <span class="keyword">in</span> </span><br><span class="line">        N)</span><br><span class="line">          <span class="built_in">read</span> -r  -p <span class="string">"Please input your release branch name!"</span> release_branch</span><br><span class="line">          ;;</span><br><span class="line">        Y)</span><br><span class="line">          <span class="built_in">break</span></span><br><span class="line">          ;;</span><br><span class="line">      <span class="keyword">esac</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">######################################## merge code ################################################</span></span><br><span class="line"></span><br><span class="line">    merge_cmd=<span class="string">"git fetch &amp;&amp; git checkout <span class="variable">$feature_branch</span> &amp;&amp; git pull &amp;&amp; git checkout master &amp;&amp; git pull &amp;&amp; git branch -D huidu &amp;&amp; git checkout huidu &amp;&amp; git pull &amp;&amp; git merge <span class="variable">$feature_branch</span> &amp;&amp; git push "</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="variable">$merge_cmd</span></span><br><span class="line">    <span class="keyword">if</span> [ ! $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"merge code failture."</span></span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#################################### read tag ######################################################</span></span><br><span class="line">    <span class="built_in">declare</span> deploy_tag</span><br><span class="line">    last_tag=$(<span class="string">"git tag | grep x | sort -r | sed -n '1p'"</span>)</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"current tag: <span class="variable">$last_tag</span>"</span></span><br><span class="line">    <span class="keyword">while</span> ((1))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      <span class="built_in">read</span> -r -p <span class="string">"Please input your tag:"</span> deploy_tag</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"confirm <span class="variable">$deploy_tag</span>"</span></span><br><span class="line">      <span class="built_in">read</span> -r -p <span class="string">"use this tag? [Y/N]"</span> confirm</span><br><span class="line">      <span class="keyword">case</span> <span class="variable">$confirm</span> <span class="keyword">in</span> </span><br><span class="line">        Y)</span><br><span class="line">          <span class="built_in">break</span></span><br><span class="line">      <span class="keyword">esac</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"this deploy use <span class="variable">$deploy_tag</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> </span><br><span class="line">    tag_cmd=<span class="string">"git tag <span class="variable">$read</span> -am `date '+%F:%T'`"</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="variable">$tag_cmd</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ ! $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"build tag failture."</span></span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">################################# delete branch ###################################################</span></span><br><span class="line"></span><br><span class="line">    delete_cmd=<span class="string">"git branch -d <span class="variable">$release_branch</span> &amp;&amp; git branch -d <span class="variable">$feature_branch</span> &amp;&amp; git push origin <span class="variable">$feature_branch</span> --delete"</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="variable">$delete_cmd</span></span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">help</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直使用命令行操作git, 发现处理发布流程还是贼费劲, 今天写个&lt;code&gt;bash&lt;/code&gt;版的一键发布, 解放下&lt;code&gt;git checkout/merge/tag&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://loovien.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>安装kubernetes</title>
    <link href="https://loovien.github.io/2018/11/18/%E5%AE%89%E8%A3%85kubernetes/"/>
    <id>https://loovien.github.io/2018/11/18/安装kubernetes/</id>
    <published>2018-11-18T14:41:12.000Z</published>
    <updated>2019-04-06T18:04:02.671Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习 kubernetes, 发现这玩意学习曲线很陡啊， 困难重重, 一是很多概念, 二是在天朝, 妈蛋安装起来就是一道坎, 今天终于安装成功了, 马克下!</p><a id="more"></a><h3 id="环境-算是入门级服务器了"><a href="#环境-算是入门级服务器了" class="headerlink" title="环境 (算是入门级服务器了)"></a>环境 (算是入门级服务器了)</h3><blockquote><p>CentOS6 折腾了一下, 放弃了,浪费时间基本玩不了。</p></blockquote><ol><li>Ubuntu 16.04.1 LTS</li><li>2核2G</li></ol><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><ol><li>这个按<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce-1" target="_blank" rel="noopener">官方文档</a>来就可以安装了。</li><li>也可使用<a href="https://yq.aliyun.com/articles/110806?spm=5176.8351553.0.0.1d071991O6binf" target="_blank" rel="noopener">阿里云</a> 安装。</li></ol><h3 id="安装-kubeadm-kubectl"><a href="#安装-kubeadm-kubectl" class="headerlink" title="安装 kubeadm kubectl"></a>安装 kubeadm kubectl</h3><ol><li><p>官方文档方式, 很抱歉, 需要科学上网</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https curl</span><br><span class="line">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://apt.kubernetes.io/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y kubelet kubeadm kubectl</span><br><span class="line">apt-mark hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure></li><li><p>使用阿里云镜像安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br><span class="line">curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><h3 id="初始化kubernetes集群"><a href="#初始化kubernetes集群" class="headerlink" title="初始化kubernetes集群"></a>初始化kubernetes集群</h3></li><li><p>上面如果正常安装后, 可以初始化集群了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubeadmin init</span></span><br></pre></td></tr></table></figure><p>这个命令基本是不会成功的, 因为需要到gcr.io上去pull镜像下来, 先从阿里云下载下来, 然后在改名字吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver-amd64:v1.12.2</span></span><br><span class="line"><span class="comment"># docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager-amd64:v1.12.2</span></span><br><span class="line"><span class="comment"># docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler-amd64:v1.12.2</span></span><br><span class="line"><span class="comment"># docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.12.2</span></span><br><span class="line"><span class="comment"># docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.2.24</span></span><br><span class="line"><span class="comment"># docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1</span></span><br><span class="line"><span class="comment"># docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.2.2</span></span><br><span class="line"><span class="comment"># 更名后, 在初始化</span></span><br><span class="line"><span class="comment"># docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver-amd64:v1.12.2 k8s.gcr.io/kube-apiserver:v1.12.2</span></span><br><span class="line"><span class="comment"># docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager-amd64:v1.12.2 k8s.gcr.io/kube-controller-manager:v1.12.2</span></span><br><span class="line"><span class="comment"># docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler-amd64:v1.12.2 k8s.gcr.io/kube-scheduler:v1.12.2</span></span><br><span class="line"><span class="comment"># docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.12.2 k8s.gcr.io/kube-proxy:v1.12.2</span></span><br><span class="line"><span class="comment"># docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.2.24 k8s.gcr.io//etcd:3.2.24</span></span><br><span class="line"><span class="comment"># docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 k8s.gcr.io/pause:3.1</span></span><br><span class="line"><span class="comment"># docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.2.2 k8s.gcr.io/coredns:1.2.2</span></span><br></pre></td></tr></table></figure><p>再初始化集群了一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubeadmin init</span></span><br></pre></td></tr></table></figure></li></ol><p>出现 <code>Your Kubernetes master has initialized successfully!</code> 表明已经安装好了, 可以愉快的玩耍了。</p><h3 id="配置-kubectl"><a href="#配置-kubectl" class="headerlink" title="配置 kubectl"></a>配置 kubectl</h3><ol><li><p>默认kubctl 是和kube-apiserver 的8080通信的, 通过<code>kubeadmin init</code> 初始化后, 使用默认6443端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p>其实就是更新端口, 和 kube-apiserver 通信。</p></li></ol><ol start="2"><li><p>校验是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> kubectl get nodes</span><br><span class="line"> NAME                STATUS     ROLES    AGE   VERSION</span><br><span class="line">ubuntu               NotReady   master   8d    v1.12.2</span><br></pre></td></tr></table></figure><p>ps: 可以愉快的玩k8s了</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习 kubernetes, 发现这玩意学习曲线很陡啊， 困难重重, 一是很多概念, 二是在天朝, 妈蛋安装起来就是一道坎, 今天终于安装成功了, 马克下!&lt;/p&gt;
    
    </summary>
    
    
      <category term="kubernetes, k8s" scheme="https://loovien.github.io/tags/kubernetes-k8s/"/>
    
  </entry>
  
  <entry>
    <title>JSON数据重构给HightChart绘图</title>
    <link href="https://loovien.github.io/2018/10/26/JSON%E6%95%B0%E6%8D%AE%E9%87%8D%E6%9E%84%E7%BB%99HightChart%E7%BB%98%E5%9B%BE/"/>
    <id>https://loovien.github.io/2018/10/26/JSON数据重构给HightChart绘图/</id>
    <published>2018-10-26T12:31:43.000Z</published>
    <updated>2019-04-06T18:04:02.609Z</updated>
    
    <content type="html"><![CDATA[<p>从服务端后去统计数据, 日期是间断的, 前端需要拿数据绘图,日期需要补充, 要么服务端补充, 要么客户端补充。</p><a id="more"></a><p>优先选着客户端补充会更好。贴码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">       "use strict"</span>;</span><br><span class="line">       <span class="keyword">var</span> data = [</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">               <span class="string">"date"</span>: <span class="string">"2018-01-01"</span>,</span><br><span class="line">               <span class="string">"value"</span>: <span class="number">10</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">               <span class="string">"date"</span>: <span class="string">"2018-01-02"</span>,</span><br><span class="line">               <span class="string">"value"</span>: <span class="number">1000</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="string">"id"</span>: <span class="number">10</span>,</span><br><span class="line">               <span class="string">"date"</span>: <span class="string">"2018-01-08"</span>,</span><br><span class="line">               <span class="string">"value"</span>: <span class="number">101</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">               <span class="string">"date"</span>: <span class="string">"2018-01-20"</span>,</span><br><span class="line">               <span class="string">"value"</span>: <span class="number">13</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="string">"id"</span>: <span class="number">3</span>,</span><br><span class="line">               <span class="string">"date"</span>: <span class="string">"2018-01-30"</span>,</span><br><span class="line">               <span class="string">"value"</span>: <span class="number">20</span></span><br><span class="line">           &#125;</span><br><span class="line">       ];</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">builder</span>(<span class="params">data, st, et, column = <span class="string">"date"</span>, step = <span class="number">86400000</span>, callback</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> index = <span class="number">0</span>,</span><br><span class="line">               result = &#123;&#125;,</span><br><span class="line">               dataLength = data.length,</span><br><span class="line">               start = (<span class="keyword">new</span> <span class="built_in">Date</span>(st)).getTime(),</span><br><span class="line">               end = (<span class="keyword">new</span> <span class="built_in">Date</span>(et)).getTime();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">typeof</span> callback == <span class="string">"undefined"</span>) &#123; <span class="comment">// 通用格式日期函数</span></span><br><span class="line">               callback = <span class="function"><span class="keyword">function</span> (<span class="params">dateObject</span>) </span>&#123;</span><br><span class="line">                   <span class="keyword">var</span> day = dateObject.getDate(),</span><br><span class="line">                       month = dateObject.getMonth() + <span class="number">1</span>;</span><br><span class="line">                   day = day &lt; <span class="number">10</span> ? <span class="string">"0"</span> + day : day;</span><br><span class="line">                   month = month &lt; <span class="number">10</span> ? <span class="string">"0"</span> + month : month;</span><br><span class="line">                   <span class="keyword">return</span> dateObject.getFullYear() + <span class="string">"-"</span> + month + <span class="string">"-"</span> + day;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">               <span class="keyword">for</span> (; index &lt; dataLength;) &#123;</span><br><span class="line">                   <span class="keyword">var</span> item = data[index],</span><br><span class="line">                       current = (<span class="keyword">new</span> <span class="built_in">Date</span>(item[column])).getTime();</span><br><span class="line">                   <span class="keyword">if</span> (current == start) &#123; <span class="comment">// 当前遍历的时间和给的数据相等</span></span><br><span class="line">                       index += <span class="number">1</span>;</span><br><span class="line">                       <span class="keyword">if</span> (index &gt;= dataLength) &#123;</span><br><span class="line">                           index = dataLength - <span class="number">1</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> item) &#123;</span><br><span class="line">                           result[key] = result[key] || [];</span><br><span class="line">                           <span class="keyword">if</span> (key == column) &#123;</span><br><span class="line">                               result[key].push(callback(<span class="keyword">new</span> <span class="built_in">Date</span>(start)));</span><br><span class="line">                               <span class="keyword">continue</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                           result[key].push(item[key])</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> item) &#123;</span><br><span class="line">                       result[key] = result[key] || [];</span><br><span class="line">                       <span class="keyword">if</span> (key == column) &#123;</span><br><span class="line">                           result[key].push(callback(<span class="keyword">new</span> <span class="built_in">Date</span>(start)));</span><br><span class="line">                           <span class="keyword">continue</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">switch</span> (<span class="keyword">typeof</span> item[key]) &#123;</span><br><span class="line">                           <span class="keyword">case</span> <span class="string">"string"</span>:</span><br><span class="line">                               result[key].push(<span class="string">""</span>);</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                           <span class="keyword">default</span>:</span><br><span class="line">                               result[key].push(<span class="number">0</span>);</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               start += step</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> result;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> result = builder(data, <span class="string">"2018-01-01"</span>, <span class="string">"2018-02-03"</span>, <span class="string">'date'</span>, <span class="number">86400000</span>, <span class="function"><span class="keyword">function</span> (<span class="params">dateObject</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> day = dateObject.getDate(),</span><br><span class="line">               month = dateObject.getMonth() + <span class="number">1</span>;</span><br><span class="line">           day = day &lt; <span class="number">10</span> ? <span class="string">"0"</span> + day : day;</span><br><span class="line">           month = month &lt; <span class="number">10</span> ? <span class="string">"0"</span> + month : month;</span><br><span class="line">           <span class="keyword">return</span> dateObject.getFullYear() + <span class="string">"/"</span> + month + <span class="string">"/"</span> + day;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line">   &#125;)();</span><br></pre></td></tr></table></figure><p><img src="/images/json-buider4chart.jpg" alt="执行结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从服务端后去统计数据, 日期是间断的, 前端需要拿数据绘图,日期需要补充, 要么服务端补充, 要么客户端补充。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript, chart" scheme="https://loovien.github.io/tags/javascript-chart/"/>
    
  </entry>
  
  <entry>
    <title>根据规则批量变更文件名</title>
    <link href="https://loovien.github.io/2018/08/31/%E6%A0%B9%E6%8D%AE%E8%A7%84%E5%88%99%E6%89%B9%E9%87%8F%E5%8F%98%E6%9B%B4%E6%96%87%E4%BB%B6%E5%90%8D/"/>
    <id>https://loovien.github.io/2018/08/31/根据规则批量变更文件名/</id>
    <published>2018-08-30T16:06:58.000Z</published>
    <updated>2019-04-06T18:04:02.671Z</updated>
    
    <content type="html"><![CDATA[<p>有个小需求, 给了一大堆有规则的文件, 在不同的文件夹下, 根据已有的规则替换成另外的文件。比如 p01.jpg =&gt; p-0-3.jpg p02 =&gt; p-0-3.jpg</p><p>目录结构如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/tmp                                            /tmp</span><br><span class="line">|-01/                                           |-01/</span><br><span class="line">    |-p01.jpg                                       |-p-0-1.jpg</span><br><span class="line">    |-p02.jpg                                       |-p-0-2.jpg</span><br><span class="line">|-02/                                           |-02/</span><br><span class="line">    |-p01.jpg              ===&gt;                     |-p-0-1.jpg</span><br><span class="line">    |-p02.jpg                                       |-p-0-2.jpg</span><br><span class="line">|-03/                                           |-03/</span><br><span class="line">    |-p01.jpg                                       |-p-0-1.jpg</span><br><span class="line">    |-p02.jpg                                       |-p-0-2.jpg</span><br><span class="line"></span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><a id="more"></a><p>最开始想到的是用bash来处理这些玩意, 应该很简单， 于是就开始写了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># @author: luowen&lt;bigpao.luo@gmail.com&gt;</span></span><br><span class="line"><span class="comment"># @desc: 批量变更名称</span></span><br><span class="line"><span class="comment"># @time: 2018-08-30</span></span><br><span class="line">OLDN=(p01.jpg p02.jpg)</span><br><span class="line">NEWN=(<span class="string">'p-0-1.jpg'</span> <span class="string">'p-0-2.jpg'</span>)</span><br><span class="line"></span><br><span class="line">pathDir=<span class="string">"/tmp"</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="variable">$&#123;!OLDN[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">value=<span class="variable">$&#123;OLDN[$index]&#125;</span></span><br><span class="line">pattern=<span class="string">"*<span class="variable">$&#123;value&#125;</span>"</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `find <span class="variable">$pathDir</span> -name <span class="string">"<span class="variable">$&#123;pattern&#125;</span>"</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">newfile=$(<span class="built_in">echo</span> <span class="variable">$file</span> | sed -n <span class="string">"s/<span class="variable">$&#123;value&#125;</span>/<span class="variable">$&#123;NEWN[$index]&#125;</span>/p"</span>)</span><br><span class="line">mv <span class="variable">$file</span> <span class="variable">$newfile</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>使用python吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">dirpath = <span class="string">"e:/tmp/"</span></span><br><span class="line"></span><br><span class="line">filemap = &#123;</span><br><span class="line">    <span class="string">"p01"</span>: <span class="string">"p-0-1"</span>,</span><br><span class="line">    <span class="string">"p02"</span>: <span class="string">"p-0-2"</span>,</span><br><span class="line">    <span class="string">"副本"</span>: <span class="string">"fb-1"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ext</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'.'</span> <span class="keyword">not</span> <span class="keyword">in</span> filename:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    <span class="keyword">return</span> filename.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_rename</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> srcfile <span class="keyword">in</span> filemap:</span><br><span class="line">        distfile = filemap.get(srcfile)</span><br><span class="line">        filepath = Path(dirpath).joinpath(<span class="string">"**/*"</span> + srcfile + <span class="string">"*"</span>)</span><br><span class="line">        paths = glob(str(filepath), recursive=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">for</span> matchfile <span class="keyword">in</span> paths:</span><br><span class="line">            matchfile_path = Path(matchfile)</span><br><span class="line">            newfile = matchfile_path.parent.joinpath(distfile + <span class="string">"."</span> + get_ext(matchfile))</span><br><span class="line">            print(matchfile, newfile)</span><br><span class="line">            shutil.copyfile(matchfile, newfile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    batch_rename()</span><br></pre></td></tr></table></figure><p>PS: 貌似真的很简单, 有bug, 如有如果有中文字符串的时候, 会匹配不上。 待续….</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有个小需求, 给了一大堆有规则的文件, 在不同的文件夹下, 根据已有的规则替换成另外的文件。比如 p01.jpg =&amp;gt; p-0-3.jpg p02 =&amp;gt; p-0-3.jpg&lt;/p&gt;
&lt;p&gt;目录结构如下&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/tmp                                            /tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-01/                                           |-01/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-p01.jpg                                       |-p-0-1.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-p02.jpg                                       |-p-0-2.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-02/                                           |-02/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-p01.jpg              ===&amp;gt;                     |-p-0-1.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-p02.jpg                                       |-p-0-2.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-03/                                           |-03/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-p01.jpg                                       |-p-0-1.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-p02.jpg                                       |-p-0-2.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ....&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="bash, rename" scheme="https://loovien.github.io/tags/bash-rename/"/>
    
  </entry>
  
  <entry>
    <title>linux 下性能查看工具集合</title>
    <link href="https://loovien.github.io/2018/08/26/linux-performance-tools/"/>
    <id>https://loovien.github.io/2018/08/26/linux-performance-tools/</id>
    <published>2018-08-26T03:14:51.000Z</published>
    <updated>2019-04-06T18:04:02.640Z</updated>
    
    <content type="html"><![CDATA[<p>linux常用的查看性能命令集合。</p><a id="more"></a><h4 id="如图"><a href="#如图" class="headerlink" title="如图"></a>如图</h4><p><img src="/images/linux-performance.jpg" alt="linux performance tools"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux常用的查看性能命令集合。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux, monitor" scheme="https://loovien.github.io/tags/linux-monitor/"/>
    
  </entry>
  
</feed>
